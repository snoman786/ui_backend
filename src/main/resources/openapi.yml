openapi: "3.0.0"
info:
  version: 1.0.0
  title: Swagger UI Backend API
  license:
    name: MIT
paths:
  /products:
    get:
      summary: List all products
      operationId: listProducts
      tags:
        - products
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Products"
        default:
          description: unxexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a Product
      operationId: createProduct
      tags:
        - product
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /products/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: Id of a Product
        schema:
          type: integer
    get:
      summary: Get A Product By Id
      operationId: getProduct
      tags:
        - product
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update a Product by Id
      operationId: updateProduct
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Product"
      responses:
        204:
          description: No Content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Product"
    delete:
      summary: Delete a Product by Id
      operationId: deleteProduct
      responses:
        200:
         description: OK

  /users:
    get:
      summary: List all Users
      operationId: listUser
      tags:
        - users
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Users"
        default:
          description: unxexpected error
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    post:
      summary: Create a User
      operationId: createUser
      tags:
        - user
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        201:
          description: Created
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        400:
          description: Bad Request
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
  /users/{id}:
    parameters:
      - name: id
        in: path
        required: true
        description: Id of a User
        schema:
          type: integer
    get:
      summary: Get A User By Id
      operationId: getUser
      tags:
        - user
      responses:
        200:
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
        404:
          description: Not Found
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Error"
    put:
      summary: Update a User by Id
      operationId: updateUser
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/User"
      responses:
        204:
          description: No Content
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/User"
    delete:
      summary: Update a User by Id
      operationId: deleteUser
      responses:
        200:
          description: OK

components:
  schemas:
    Product:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        price:
          type: number
    Products:
      type: array
      items:
        $ref: "#/components/schemas/Product"
    User:
      type: object
      properties:
        id:
          type: integer
          format: int64
        firstName:
          type: string
        lastName:
          type: string
        userName:
          type: string
        age:
          type: integer
          format: int32
        salary:
          type: number
    Users:
      type: array
      items:
        $ref: "#/components/schemas/User"
    Error:
      type: object
      properties:
        code:
          type: integer
          format: int32
        message:
          type: string